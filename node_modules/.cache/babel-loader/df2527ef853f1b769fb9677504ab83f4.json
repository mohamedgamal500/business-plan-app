{"ast":null,"code":"var _jsxFileName = \"E:\\\\business-plan-app\\\\client\\\\src\\\\components\\\\SectionTwo.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport { useState, useEffect } from \"react\";\nimport { setQuizState, setQuestionsLength } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SectionTwo() {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [target, setTarget] = useState(false);\n  const [questions, setQuestions] = useState([{\n    id: 4,\n    prompt: \"Did you have an investment?\",\n    choices: [{\n      option: \"yes\",\n      targetQuestionId: []\n    }, {\n      option: \"no\",\n      targetQuestionId: []\n    }]\n  }, {\n    id: 5,\n    prompt: \"How much was the investment?\",\n    choices: []\n  }]);\n  const {\n    score\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  console.log(questions);\n  console.log(\"cur\", currentQuestion);\n  useEffect(() => {\n    dispatch(setQuestionsLength(questions.length));\n  }, []);\n\n  const nextQuestion = targetQuestionId => {\n    if (targetQuestionId.length !== 0) {\n      let result = questions.filter(question => targetQuestionId.some(o2 => question.id === o2));\n      setQuestions(result);\n    }\n\n    if (target && currentQuestion !== questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    }\n\n    setTarget(true);\n  };\n\n  const finishQuiz = () => {\n    dispatch(setQuizState(\"finished\"));\n  };\n\n  return questions.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: questions[currentQuestion].prompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions\",\n      children: questions[currentQuestion].choices !== 0 ? questions[currentQuestion].choices.map((choice, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            nextQuestion(choice.targetQuestionId); // dispatch action answered questions\n            // copy the question add key called answer with the answer\n            // then disptach this to to redux\n          },\n          children: choice.option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"numbers:[]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), currentQuestion === questions.length - 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: finishQuiz,\n      id: \"nextQuestion\",\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SectionTwo, \"er6pBqkfKrw/oJMO2WUPO9ABNyg=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = SectionTwo;\nexport default SectionTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionTwo\");","map":{"version":3,"sources":["E:/business-plan-app/client/src/components/SectionTwo.js"],"names":["useState","useEffect","setQuizState","setQuestionsLength","useDispatch","useSelector","SectionTwo","currentQuestion","setCurrentQuestion","target","setTarget","questions","setQuestions","id","prompt","choices","option","targetQuestionId","score","state","dispatch","console","log","length","nextQuestion","result","filter","question","some","o2","finishQuiz","map","choice","index"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { setQuizState, setQuestionsLength } from \"../actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nfunction SectionTwo() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [target, setTarget] = useState(false);\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n      id: 4,\r\n      prompt: \"Did you have an investment?\",\r\n      choices: [\r\n        { option: \"yes\", targetQuestionId: [] },\r\n        { option: \"no\", targetQuestionId: [] },\r\n      ],\r\n    },\r\n    {\r\n      id: 5,\r\n      prompt: \"How much was the investment?\",\r\n      choices: [],\r\n    },\r\n  ]);\r\n  const { score } = useSelector((state) => state);\r\n  const dispatch = useDispatch();\r\n\r\n  console.log(questions);\r\n  console.log(\"cur\", currentQuestion);\r\n  useEffect(() => {\r\n    dispatch(setQuestionsLength(questions.length));\r\n  }, []);\r\n\r\n  const nextQuestion = (targetQuestionId) => {\r\n  \r\n      if (targetQuestionId.length !== 0) {\r\n        let result = questions.filter((question) =>\r\n          targetQuestionId.some((o2) => question.id === o2)\r\n        );\r\n        setQuestions(result);\r\n      }\r\n      if (target && currentQuestion !== questions.length - 1) {\r\n        setCurrentQuestion(currentQuestion + 1);\r\n      }\r\n      setTarget(true);\r\n    }\r\n  \r\n\r\n  const finishQuiz = () => {\r\n    dispatch(setQuizState(\"finished\"));\r\n  };\r\n\r\n  return (\r\n    questions.length !== 0 && (\r\n      <div className=\"Quiz\">\r\n        <h1>{questions[currentQuestion].prompt}</h1>\r\n        <div className=\"questions\">\r\n          {questions[currentQuestion].choices !== 0 ? (\r\n            questions[currentQuestion].choices.map((choice, index) => {\r\n              return (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => {\r\n                    nextQuestion(choice.targetQuestionId);\r\n                    // dispatch action answered questions\r\n                    // copy the question add key called answer with the answer\r\n                    // then disptach this to to redux\r\n                  }}\r\n                >\r\n                  {choice.option}\r\n                </button>\r\n              );\r\n            })\r\n          ) : (\r\n            <p>numbers:[]</p>\r\n          )}\r\n        </div>\r\n        {currentQuestion === questions.length - 1 && (\r\n        <button onClick={finishQuiz} id=\"nextQuestion\">\r\n        Next\r\n        </button>\r\n      ) }\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default SectionTwo;\r\n"]},"metadata":{},"sourceType":"module"}