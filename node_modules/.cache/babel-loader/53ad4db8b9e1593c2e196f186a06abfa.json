{"ast":null,"code":"var _jsxFileName = \"E:\\\\business-plan-app\\\\client\\\\src\\\\components\\\\SectionTwo.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport { useState } from \"react\";\nimport { setQuizState, setAnsweredQuestions } from \"../actions\";\nimport { useDispatch } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction SectionTwo() {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [answer, setAnswer] = useState(\"\");\n  const [investmentNumber, setInvestmentNumber] = useState(0);\n  const [questions, setQuestions] = useState([{\n    id: 4,\n    prompt: \"Did you have an investment?\",\n    choices: [{\n      option: \"yes\",\n      targetQuestionId: []\n    }, {\n      option: \"no\",\n      targetQuestionId: []\n    }]\n  }, {\n    id: 5,\n    prompt: \"How much was the investment?\",\n    choices: []\n  }]);\n  const dispatch = useDispatch();\n\n  const finishQuiz = () => {\n    dispatch(setQuizState(\"finished\"));\n  };\n\n  return questions.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: questions[currentQuestion].prompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions\",\n      children: questions[currentQuestion].choices.length !== 0 ? questions[currentQuestion].choices.map((choice, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCurrentQuestion(currentQuestion + 1);\n            setAnswer(choice.option); // dispatch action answered questions\n            // copy the question add key called answer with the answer\n            // then disptach this to to redux\n\n            let q = { ...questions[currentQuestion]\n            };\n            q.answer = choice.option;\n            dispatch(setAnsweredQuestions(q));\n          },\n          children: choice.option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"investmentNumber\",\n          disabled: answer === \"yes\" ? false : true,\n          type: \"number\",\n          min: \"1\",\n          value: investmentNumber,\n          onChange: event => {\n            setInvestmentNumber(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 15\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"$\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), currentQuestion === questions.length - 1 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: answer === \"yes\" && investmentNumber === 0,\n        onClick: () => {\n          let q = { ...questions[currentQuestion]\n          };\n          q.answer = `${investmentNumber} $`;\n          dispatch(setAnsweredQuestions(q));\n          finishQuiz();\n        },\n        id: \"nextQuestion\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this)\n    }, void 0, false)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SectionTwo, \"AYVjMbiPIUHSS4D4Daq4FthOzkI=\", false, function () {\n  return [useDispatch];\n});\n\n_c = SectionTwo;\nexport default SectionTwo;\n\nvar _c;\n\n$RefreshReg$(_c, \"SectionTwo\");","map":{"version":3,"sources":["E:/business-plan-app/client/src/components/SectionTwo.js"],"names":["useState","setQuizState","setAnsweredQuestions","useDispatch","SectionTwo","currentQuestion","setCurrentQuestion","answer","setAnswer","investmentNumber","setInvestmentNumber","questions","setQuestions","id","prompt","choices","option","targetQuestionId","dispatch","finishQuiz","length","map","choice","index","q","event","target","value"],"mappings":"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","sourcesContent":["import \"../App.css\";\r\nimport { useState } from \"react\";\r\nimport { setQuizState, setAnsweredQuestions } from \"../actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nfunction SectionTwo() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [answer, setAnswer] = useState(\"\");\r\n  const [investmentNumber, setInvestmentNumber] = useState(0);\r\n\r\n  const [questions, setQuestions] = useState([\r\n    {\r\n      id: 4,\r\n      prompt: \"Did you have an investment?\",\r\n      choices: [\r\n        { option: \"yes\", targetQuestionId: [] },\r\n        { option: \"no\", targetQuestionId: [] },\r\n      ],\r\n    },\r\n    {\r\n      id: 5,\r\n      prompt: \"How much was the investment?\",\r\n      choices: [],\r\n    },\r\n  ]);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const finishQuiz = () => {\r\n    dispatch(setQuizState(\"finished\"));\r\n  };\r\n\r\n  return (\r\n    questions.length !== 0 && (\r\n      <div className=\"Quiz\">\r\n        <h1>{questions[currentQuestion].prompt}</h1>\r\n        <div className=\"questions\">\r\n          {questions[currentQuestion].choices.length !== 0 ? (\r\n            questions[currentQuestion].choices.map((choice, index) => {\r\n              return (\r\n                <button\r\n                  key={index}\r\n                  onClick={() => {\r\n                    setCurrentQuestion(currentQuestion + 1);\r\n                    setAnswer(choice.option);\r\n                    // dispatch action answered questions\r\n                    // copy the question add key called answer with the answer\r\n                    // then disptach this to to redux\r\n                    let q = { ...questions[currentQuestion] };\r\n                    q.answer = choice.option;\r\n                    dispatch(setAnsweredQuestions(q));\r\n                  }}\r\n                >\r\n                  {choice.option}\r\n                </button>\r\n              );\r\n            })\r\n          ) : (\r\n            <>\r\n              <input\r\n                id=\"investmentNumber\"\r\n                disabled={answer === \"yes\" ? false : true}\r\n                type=\"number\"\r\n                min=\"1\"\r\n                value={investmentNumber}\r\n                onChange={(event) => {\r\n                  setInvestmentNumber(event.target.value);\r\n                }}\r\n              />{\" \"}\r\n              <span>$</span>\r\n            </>\r\n          )}\r\n        </div>\r\n        {currentQuestion === questions.length - 1 && (\r\n          <>\r\n            <button\r\n              disabled={answer === \"yes\" && investmentNumber === 0}\r\n              onClick={() => {\r\n                let q = { ...questions[currentQuestion] };\r\n                q.answer = `${investmentNumber} $`;\r\n                dispatch(setAnsweredQuestions(q));\r\n                finishQuiz();\r\n              }}\r\n              id=\"nextQuestion\"\r\n            >\r\n              Next\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default SectionTwo;\r\n"]},"metadata":{},"sourceType":"module"}