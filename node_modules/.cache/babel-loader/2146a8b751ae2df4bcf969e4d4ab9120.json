{"ast":null,"code":"var _jsxFileName = \"E:\\\\business-plan-app\\\\client\\\\src\\\\components\\\\Quiz.js\",\n    _s = $RefreshSig$();\n\nimport \"../App.css\";\nimport { useState, useEffect } from \"react\";\nimport { setQuizState, setAnsweredQuestions } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Quiz() {\n  _s();\n\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [target, setTarget] = useState(false);\n  const [questions, setQuestions] = useState([{\n    id: 1,\n    prompt: \"Is your business model B2C or B2B or both?\",\n    choices: [{\n      option: \"B2C\",\n      targetQuestionId: [3]\n    }, {\n      option: \"B2B\",\n      targetQuestionId: [2]\n    }, {\n      option: \"both\",\n      targetQuestionId: [2, 3]\n    }]\n  }, {\n    id: 2,\n    prompt: \"Do you target all age brackets?\",\n    choices: [{\n      option: \"yes\",\n      targetQuestionId: []\n    }, {\n      option: \"no\",\n      targetQuestionId: []\n    }]\n  }, {\n    id: 3,\n    prompt: \"Do you target all industries?\",\n    choices: [{\n      option: \"yes\",\n      targetQuestionId: []\n    }, {\n      option: \"no\",\n      targetQuestionId: []\n    }]\n  }]);\n  const {\n    score\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n\n  const nextQuestion = targetQuestionId => {\n    if (currentQuestion === questions.length - 1) {\n      // add next button in this conditon in jsx\n      //then when on click dispatch finished goto section 2\n      dispatch(setQuizState(\"sectionTwo\"));\n    } else {\n      if (targetQuestionId.length !== 0) {\n        let result = questions.filter(question => targetQuestionId.some(o2 => question.id === o2));\n        setQuestions(result);\n      }\n\n      if (target) {\n        setCurrentQuestion(currentQuestion + 1);\n      }\n\n      setTarget(true);\n    }\n  };\n\n  const finishQuiz = () => {\n    dispatch(setQuizState(\"finished\"));\n  };\n\n  return questions.length !== 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Quiz\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: questions[currentQuestion].prompt\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"questions\",\n      children: questions[currentQuestion].choices.map((choice, index) => {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            nextQuestion(choice.targetQuestionId); // dispatch action answered questions\n\n            let q = { ...questions[currentQuestion]\n            };\n            q.answer = choice.option;\n            dispatch(setAnsweredQuestions(q)); // copy the question add key called answer with the answer\n            // then disptach this to to redux\n          },\n          children: choice.option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 7\n  }, this);\n}\n\n_s(Quiz, \"KfxuvJCdNxSsbr+dtDrZ3CCN8wU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["E:/business-plan-app/client/src/components/Quiz.js"],"names":["useState","useEffect","setQuizState","setAnsweredQuestions","useDispatch","useSelector","Quiz","currentQuestion","setCurrentQuestion","target","setTarget","questions","setQuestions","id","prompt","choices","option","targetQuestionId","score","state","dispatch","nextQuestion","length","result","filter","question","some","o2","finishQuiz","map","choice","index","q","answer"],"mappings":"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","sourcesContent":["import \"../App.css\";\nimport { useState, useEffect } from \"react\";\nimport { setQuizState, setAnsweredQuestions } from \"../actions\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction Quiz() {\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [target, setTarget] = useState(false);\n  const [questions, setQuestions] = useState([\n    {\n      id: 1,\n      prompt: \"Is your business model B2C or B2B or both?\",\n      choices: [\n        { option: \"B2C\", targetQuestionId: [3] },\n        { option: \"B2B\", targetQuestionId: [2] },\n        { option: \"both\", targetQuestionId: [2, 3] },\n      ],\n    },\n    {\n      id: 2,\n      prompt: \"Do you target all age brackets?\",\n      choices: [\n        { option: \"yes\", targetQuestionId: [] },\n        { option: \"no\", targetQuestionId: [] },\n      ],\n    },\n    {\n      id: 3,\n      prompt: \"Do you target all industries?\",\n      choices: [\n        { option: \"yes\", targetQuestionId: [] },\n        { option: \"no\", targetQuestionId: [] },\n      ],\n    },\n  ]);\n  const { score } = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const nextQuestion = (targetQuestionId) => {\n    if (currentQuestion === questions.length - 1) {\n      // add next button in this conditon in jsx\n      //then when on click dispatch finished goto section 2\n      dispatch(setQuizState(\"sectionTwo\"));\n    } else {\n      if (targetQuestionId.length !== 0) {\n        let result = questions.filter((question) =>\n          targetQuestionId.some((o2) => question.id === o2)\n        );\n        setQuestions(result);\n      }\n      if (target) {\n        setCurrentQuestion(currentQuestion + 1);\n      }\n      setTarget(true);\n    }\n  };\n\n  const finishQuiz = () => {\n    dispatch(setQuizState(\"finished\"));\n  };\n\n  return (\n    questions.length !== 0 && (\n      <div className=\"Quiz\">\n        <h1>{questions[currentQuestion].prompt}</h1>\n        <div className=\"questions\">\n          {questions[currentQuestion].choices.map((choice, index) => {\n            return (\n              <button\n                key={index}\n                onClick={() => {\n                  nextQuestion(choice.targetQuestionId);\n                  // dispatch action answered questions\n                  let q = { ...questions[currentQuestion] };\n                  q.answer = choice.option;\n                  dispatch(setAnsweredQuestions(q));\n                  // copy the question add key called answer with the answer\n                  // then disptach this to to redux\n                }}\n              >\n                {choice.option}\n              </button>\n            );\n          })}\n        </div>\n        {/* {currentQuestion === questions.length - 1 && (\n        <button onClick={finishQuiz} id=\"nextQuestion\">\n        Next\n        </button>\n      ) } */}\n      </div>\n    )\n  );\n}\n\nexport default Quiz;\n"]},"metadata":{},"sourceType":"module"}